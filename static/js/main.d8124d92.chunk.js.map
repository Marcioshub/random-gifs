{"version":3,"sources":["images/giphy-logo.svg","components/useGif.js","components/One.js","components/Two.js","components/Three.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","process","useGif","tag","useState","gif","setGif","fetchGif","a","axios","get","data","imageSrc","images","downsized_large","useEffect","One","setTag","copied","setCopied","timeout","setTimeout","clearTimeout","Card","style","width","padding","margin","display","Img","variant","height","src","alt","Body","Title","Text","Form","Control","type","value","onChange","e","target","placeholder","Button","marginBottom","onClick","text","onCopy","Alert","className","Two","Three","App","Jumbotron","logo","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8124d92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphy-logo.e26e192e.svg\";","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}`;\n\nconst useGif = (tag) => {\n  const [gif, setGif] = useState(\"\");\n  const fetchGif = async (tag) => {\n    const { data } = await axios.get(tag ? `${url}&tag=${tag}` : url);\n\n    const imageSrc = data.data.images.downsized_large.url;\n\n    setGif(imageSrc);\n  };\n\n  useEffect(() => {\n    fetchGif(tag);\n  }, [tag]);\n\n  return { gif, fetchGif };\n};\n\nexport default useGif;\n","import React, { useEffect, useState } from \"react\";\nimport useGif from \"./useGif\";\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport default function One() {\n  const [tag, setTag] = useState(\"\");\n  const { gif, fetchGif } = useGif(tag);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [copied]);\n\n  return (\n    <Card\n      style={{\n        width: \"20rem\",\n        padding: 10,\n        margin: 5,\n        display: \"inline-block\",\n      }}\n    >\n      <Card.Img variant=\"top\" width={200} height={200} src={gif} alt=\"random\" />\n      <Card.Body>\n        <Card.Title>Random gifs</Card.Title>\n        <Card.Text>\n          <Form.Control\n            type=\"text\"\n            value={tag}\n            onChange={(e) => setTag(e.target.value)}\n            placeholder=\"Enter tag\"\n          />\n        </Card.Text>\n        <Button\n          variant=\"success\"\n          style={{ width: \"100%\", marginBottom: 5 }}\n          onClick={() => fetchGif(tag)}\n        >\n          Refresh\n        </Button>\n        <CopyToClipboard text={gif} onCopy={() => setCopied(true)}>\n          <Button variant=\"info\" style={{ width: \"100%\", marginBottom: 5 }}>\n            Copy gif\n          </Button>\n        </CopyToClipboard>\n        {copied ? (\n          <Alert variant=\"primary\" className=\"mt-2\">\n            Copied!\n          </Alert>\n        ) : null}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport useGif from \"./useGif\";\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport default function Two() {\n  const [tag, setTag] = useState(\"cats\");\n  const { gif, fetchGif } = useGif(tag);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [copied]);\n\n  return (\n    <Card\n      style={{\n        width: \"20rem\",\n        padding: 10,\n        margin: 5,\n        display: \"inline-block\",\n      }}\n    >\n      <Card.Img variant=\"top\" width={200} height={200} src={gif} alt=\"random\" />\n      <Card.Body>\n        <Card.Title>Random gifs</Card.Title>\n        <Card.Text>\n          <Form.Control\n            type=\"text\"\n            value={tag}\n            onChange={(e) => setTag(e.target.value)}\n            placeholder=\"Enter tag\"\n          />\n        </Card.Text>\n        <Button\n          variant=\"success\"\n          style={{ width: \"100%\", marginBottom: 5 }}\n          onClick={() => fetchGif(tag)}\n        >\n          Refresh\n        </Button>\n        <CopyToClipboard text={gif} onCopy={() => setCopied(true)}>\n          <Button variant=\"info\" style={{ width: \"100%\", marginBottom: 5 }}>\n            Copy gif\n          </Button>\n        </CopyToClipboard>\n        {copied ? (\n          <Alert variant=\"primary\" className=\"mt-2\">\n            Copied!\n          </Alert>\n        ) : null}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport useGif from \"./useGif\";\nimport { Card, Form, Button, Alert } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport default function Three() {\n  const [tag, setTag] = useState(\"dogs\");\n  const { gif, fetchGif } = useGif(tag);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [copied]);\n\n  return (\n    <Card\n      style={{\n        width: \"20rem\",\n        padding: 10,\n        margin: 5,\n        display: \"inline-block\",\n      }}\n    >\n      <Card.Img variant=\"top\" width={200} height={200} src={gif} alt=\"random\" />\n      <Card.Body>\n        <Card.Title>Random gifs</Card.Title>\n        <Card.Text>\n          <Form.Control\n            type=\"text\"\n            value={tag}\n            onChange={(e) => setTag(e.target.value)}\n            placeholder=\"Enter tag\"\n          />\n        </Card.Text>\n        <Button\n          variant=\"success\"\n          style={{ width: \"100%\", marginBottom: 5 }}\n          onClick={() => fetchGif(tag)}\n        >\n          Refresh\n        </Button>\n        <CopyToClipboard text={gif} onCopy={() => setCopied(true)}>\n          <Button variant=\"info\" style={{ width: \"100%\", marginBottom: 5 }}>\n            Copy gif\n          </Button>\n        </CopyToClipboard>\n        {copied ? (\n          <Alert variant=\"primary\" className=\"mt-2\">\n            Copied!\n          </Alert>\n        ) : null}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Jumbotron, Container, Row, Col } from \"react-bootstrap\";\nimport logo from \"./images/giphy-logo.svg\";\nimport \"./App.css\";\n\n// components\nimport One from \"./components/One\";\nimport Two from \"./components/Two\";\nimport Three from \"./components/Three\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron>\n        <h1>Random GIFs</h1>\n        <h4>Find random gifs to copy</h4>\n        <h6>Powered by the giphy api</h6>\n        <img src={logo} width={300} alt=\"logo\" />\n      </Jumbotron>\n      <br />\n      <Container className=\"mb-5\">\n        <Row>\n          <Col>\n            <One />\n          </Col>\n          <Col>\n            <Two />\n          </Col>\n          <Col>\n            <Three />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}